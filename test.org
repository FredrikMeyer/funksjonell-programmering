#+OPTIONS: toc:nil num:nil date:nil
#+REVEAL_THEME: Moon
#+Title: Funksjonell programmering
#+Author: Fredrik Meyer
#+Email: @FredrikMeyer
#+DATE: nil

* Hva jeg skal snakke om
  #+ATTR_REVEAL: :frag (appear)
  - Abstraksjoner
    - Historiens største oppfinnelse
  - Modularitet
  - Noen ord om tilstand
  - Objektorientert programmering
  - Funksjonell programmering
  - Hvis tid: lambda!.

* Abstraksjoner
 - Det hele startet i steinalderen. (bilde av steinaldermann)
** Verktøy som vi forstår
   - Spader, steiner, sakser.
   - Delvis: blyant, penn...
** Verktøy som vi ikke forstår
   - Biler, trykkpresse, ...

* Modulære programmer
  - Ikke alt i én fil. 

* Noen ord om tilstand
  - Eksempel: nettside. Er den boksen åpen eller lukket? Er det integralet allerede regnet ut? Hva er passordet til databasen?
  - Vanskelig å holde styr på (hvorfor??). En utfordring man gjerne ikke tenker på under studiene (!!).
  - MÅ HA EKSEMPEL

** Trivielt eksempel
   #+BEGIN_SRC python
s = 0
i = 0
while i < 10:
    s += i*i
    i += 1
return s
   #+END_src

   #+ATTR_REVEAL: :frag (appear)
   - i varierer i verdi.
   - Hva om vi har to parallelle prosesser kjørende og den ene endrer på i?

* Objektorientert programmering
  - *Objekter* er den foretrukne abstrakjonsmekanismen.
  - Objekter har ansvaret for egne oppgaver - implementasjonen er uinteressant.
** Eksempel
** Fordeler
   #+ATTR_REVEAL: :frag (appear)
   - Modulært
   - fdf
   - dfdf
** Ulemper

* Funksjonell programmering
  - Funksjoner er den foretrukne abstrakjonsmekanismen.
** Eksempel
   - 
** Fordeler
   - Modulært
** Ulemper
   - Noe hardere på minnebruk
Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet 

* 
* Fordeler 
  
* Lamba?? 
   #+BEGIN_SRC python
import numpy as np

x = 2 + 3
   #+END_SRC



